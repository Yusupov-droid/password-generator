{"version":3,"sources":["components/container/container.tsx","components/checkbox/checkbox.tsx","components/password-generator/password-generator.tsx","utils/password-generator.ts","components/content/content.tsx","App.tsx","index.tsx"],"names":["Container","props","className","children","Checkbox","type","checked","onChange","event","target","label","React","memo","PasswordGenerator","useState","length","password","setPassword","useSymbols","setUseSymbols","useNumbers","setUseNumbers","useLowerCaseLetters","setUseLowerCaseLetters","useUpperCaseLetters","setUseUpperCaseLetters","generateNewPassword","generated","chars","i","random","Math","floor","substring","passwordGenerator","useEffect","onClick","navigator","clipboard","writeText","then","console","log","catch","Content","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAYeA,EARa,SAACC,GAAD,OACxB,mCACI,qBAAKC,UAAU,YAAf,SACKD,EAAME,c,OCHbC,G,YAAW,SAACH,GACd,OACI,wBAAOC,UAAU,WAAjB,UACI,uBACIA,UAAU,kBACVG,KAAK,WACLC,QAASL,EAAMK,QACfC,SAAU,SAAAC,GAAK,OAAIP,EAAMM,SAASC,EAAMC,OAAOH,YAEnD,sBAAMJ,UAAU,qBACfD,EAAMS,WAKJC,MAAMC,KAAKR,GCuEXS,EApFqB,WAEhC,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KACA,GADA,KACgCD,mBAAS,KAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAsDP,oBAAS,GAA/D,mBAAOQ,EAAP,KAA4BC,EAA5B,KACA,EAAsDT,oBAAS,GAA/D,mBAAOU,EAAP,KAA4BC,EAA5B,KAGMC,EAAsB,WACxB,IAAIC,ECjBqB,SAC7BZ,EACAG,EACAE,EACAI,EACAF,GAGA,IAKIM,EAAQ,GACRZ,EAAW,GAEfY,GAASV,EARO,YAQgB,GAChCU,GAASR,EARO,YAQgB,GAChCQ,GAASN,EARgB,6BAQyB,GAClDM,GAASJ,EARgB,6BAQyB,GAGlD,IAAK,IAAIK,EAAI,EAAGA,GAAKd,EAAQc,IAAK,CAC9B,IAAIC,EAASC,KAAKC,MAAMD,KAAKD,SAAWF,EAAMb,QAC9CC,GAAYY,EAAMK,UAAUH,EAAQA,EAAS,GAGjD,OAAOd,EDVakB,CAAkBnB,EAAQG,EAAYE,EAAYI,EAAqBF,GACvFL,EAAYU,IAoBhB,OALAQ,qBAAU,WACNT,MACD,CAACX,EAAQG,EAAYE,EAAYE,EAAqBE,IAIrD,mCACI,qBAAKtB,UAAU,YAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAhB,gCACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,CACIQ,MAAM,UACNJ,QAASc,EACTb,SAAUc,MAGlB,qBAAKnB,UAAU,oBAAf,SACI,cAAC,EAAD,CACIQ,MAAM,UACNJ,QAASY,EACTX,SAAUY,MAGlB,qBAAKjB,UAAU,oBAAf,SACI,cAAC,EAAD,CACIQ,MAAM,YACNJ,QAASkB,EACTjB,SAAUkB,MAGlB,qBAAKvB,UAAU,oBAAf,SACI,cAAC,EAAD,CACIQ,MAAM,YACNJ,QAASgB,EACTf,SAAUgB,SAItB,qBAAKrB,UAAU,qBAAf,SACI,wBAAQA,UAAU,yBAAyBkC,QAASV,EAApD,wBAEJ,sBAAKxB,UAAU,oBAAf,UACI,sBAAMA,UAAU,yBAAyBkC,QAxDxC,WACjBC,UACKC,UACAC,UAAUvB,GACVwB,MAAK,WACFC,QAAQC,IAAI,cAEfC,OAAM,WACHF,QAAQC,IAAI,aAgDJ,kBACA,sBAAMxC,UAAU,2BAAhB,SAEQc,EAASD,OAAS,EAAIC,EAAW,kDEpElD4B,G,MARW,SAAC3C,GAAD,OACtB,mCACI,qBAAKC,UAAU,UAAf,SACKD,EAAME,eCUJ0C,EAVO,kBAClB,qBAAK3C,UAAU,MAAf,SACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,WCNhB4C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.55612512.chunk.js","sourcesContent":["import './container.css'\r\nimport React, {PropsWithChildren} from 'react';\r\n\r\n\r\nconst Container: React.FC = (props: PropsWithChildren<{}>) => (\r\n    <>\r\n        <div className=\"container\">\r\n            {props.children}\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Container;","import './checkbox.css'\r\nimport React from \"react\";\r\n\r\n\r\nconst Checkbox = (props: { label: string, checked: boolean, onChange: ((value: boolean) => void) }) => {\r\n    return (\r\n        <label className=\"checkbox\">\r\n            <input\r\n                className=\"checkbox__input\"\r\n                type=\"checkbox\"\r\n                checked={props.checked}\r\n                onChange={event => props.onChange(event.target.checked)}\r\n            />\r\n            <span className=\"checkbox__target\" />\r\n            {props.label}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default React.memo(Checkbox);","import './password-generator.css'\r\nimport React, { useEffect, useState } from 'react';\r\nimport Checkbox from \"../checkbox\";\r\nimport { passwordGenerator } from \"../../utils\";\r\n\r\n\r\nconst PasswordGenerator: React.FC = () => {\r\n\r\n    const [length, setLength] = useState(12);\r\n    const [password, setPassword] = useState('');\r\n    const [useSymbols, setUseSymbols] = useState(true);\r\n    const [useNumbers, setUseNumbers] = useState(true);\r\n    const [useLowerCaseLetters, setUseLowerCaseLetters] = useState(true);\r\n    const [useUpperCaseLetters, setUseUpperCaseLetters] = useState(true);\r\n\r\n\r\n    const generateNewPassword = () => {\r\n        let generated = passwordGenerator(length, useSymbols, useNumbers, useUpperCaseLetters, useLowerCaseLetters);\r\n        setPassword(generated);\r\n    };\r\n\r\n    const copyPassword = () => {\r\n        navigator\r\n            .clipboard\r\n            .writeText(password)\r\n            .then(() => {\r\n                console.log('success')\r\n            })\r\n            .catch(() => {\r\n                console.log('error')\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        generateNewPassword();\r\n    }, [length, useSymbols, useNumbers, useLowerCaseLetters, useUpperCaseLetters])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"generator\">\r\n                <div className=\"generator__inner\">\r\n                    <span className=\"generator__title\">PASSWORD GENERATOR</span>\r\n                    <div className=\"generator__options\">\r\n                        <div className=\"generator__option\">\r\n                            <Checkbox\r\n                                label=\"Numbers\"\r\n                                checked={useNumbers}\r\n                                onChange={setUseNumbers}\r\n                            />\r\n                        </div>\r\n                        <div className=\"generator__option\">\r\n                            <Checkbox\r\n                                label=\"Symbols\"\r\n                                checked={useSymbols}\r\n                                onChange={setUseSymbols}\r\n                            />\r\n                        </div>\r\n                        <div className=\"generator__option\">\r\n                            <Checkbox\r\n                                label=\"UpperCase\"\r\n                                checked={useUpperCaseLetters}\r\n                                onChange={setUseUpperCaseLetters}\r\n                            />\r\n                        </div>\r\n                        <div className=\"generator__option\">\r\n                            <Checkbox\r\n                                label=\"LowerCase\"\r\n                                checked={useLowerCaseLetters}\r\n                                onChange={setUseLowerCaseLetters}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"generator__starter\">\r\n                        <button className=\"generator__starter-btn\" onClick={generateNewPassword}>GENERATE</button>\r\n                    </div>\r\n                    <div className=\"generator__output\">\r\n                        <span className=\"generator__output-copy\" onClick={copyPassword}>COPY</span>\r\n                        <span className=\"generator__output-result\">\r\n                            {\r\n                                password.length > 0 ? password : 'Please select at least one option.'\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PasswordGenerator;","export const passwordGenerator = (\r\n    length: number,\r\n    useSymbols: boolean,\r\n    useNumbers: boolean,\r\n    useUpperCaseLetters: boolean,\r\n    useLowerCaseLetters: boolean,\r\n): string => {\r\n\r\n    const symbols = '!@$%^&*()';\r\n    const numbers = '123456789';\r\n    const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r\n    const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    let chars = ''\r\n    let password = ''\r\n\r\n    chars += useSymbols ? symbols : '';\r\n    chars += useNumbers ? numbers : '';\r\n    chars += useLowerCaseLetters ? lowerCaseLetters : '';\r\n    chars += useUpperCaseLetters ? upperCaseLetters : '';\r\n\r\n\r\n    for (let i = 0; i <= length; i++) {\r\n        let random = Math.floor(Math.random() * chars.length);\r\n        password += chars.substring(random, random + 1);\r\n    }\r\n\r\n    return password;\r\n}","import './content.css'\r\nimport React, {PropsWithChildren} from 'react';\r\n\r\n\r\nconst Content: React.FC = (props: PropsWithChildren<{}>) => (\r\n    <>\r\n        <div className=\"content\">\r\n            {props.children}\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Content;","import './App.css'\r\n\r\nimport React from 'react';\r\nimport Container from \"./components/container\";\r\nimport PasswordGenerator from \"./components/password-generator\";\r\nimport Content from \"./components/content\";\r\n\r\nconst App: React.FC = () => (\r\n    <div className='app'>\r\n        <Container>\r\n            <Content>\r\n                <PasswordGenerator/>\r\n            </Content>\r\n        </Container>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}